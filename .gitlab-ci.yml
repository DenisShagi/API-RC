stages:
  - release
  - deploy

############################################################
# Якорь для уведомлений
############################################################
.notify: &notify
  after_script:
    - >
      STATUS="$CI_JOB_STATUS";
      if [ "$STATUS" = "success" ]; then ICON="✅"; else ICON="❌"; fi;
      RAW="$(printf "%s\n%s\n%s\n%s\n" \
        "${ICON} *${CI_PROJECT_PATH}* – *${CI_JOB_NAME}* (\`${CI_JOB_STAGE}\`)" \
        "*Status:* \`${STATUS}\`" \
        "*Pipeline:* [#${CI_PIPELINE_ID}](${CI_PROJECT_URL}/-/pipelines/${CI_PIPELINE_ID})" \
        "*Commit:*  [${CI_COMMIT_SHORT_SHA}](${CI_PROJECT_URL}/-/commit/${CI_COMMIT_SHA})" )";
      TEXT="${RAW//$'\n'/%0A}";
      curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
        -d chat_id="${CHAT_ID}" \
        -d parse_mode="Markdown" \
        --data-urlencode "text=${TEXT}"

############################################################
# 1️⃣ RELEASE — semantic-release на master
############################################################
release:
  stage: release
  image: node:22-alpine
  script:
    - npm ci
    - npx semantic-release
  only:
    - master
  <<: *notify

############################################################
# 2️⃣ DEPLOY — автоматическая доставка на сервер
############################################################
deploy:
  stage: deploy
  image: node:22
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$KNOWN_HOSTS" > ~/.ssh/known_hosts
  script:
    - ssh $SSH_USER@$SSH_HOST '
        mkdir -p /home/builds/event-api
      '
    - scp -r . $SSH_USER@$SSH_HOST:/home/builds/event-api/
    - ssh $SSH_USER@$SSH_HOST '
        cd /home/builds/event-api &&
        npm ci --omit=dev &&
        pm2 restart ecosystem.config.js || pm2 start src/index.js --name event-api &&
        pm2 logs event-api --lines 500 > deploy_logs.txt
      '
    - scp $SSH_USER@$SSH_HOST:/home/builds/event-api/deploy_logs.txt ./deploy_logs.txt
  artifacts:
    paths:
      - deploy_logs.txt
    expire_in: 1 week
  after_script:
    - >
      if [ "$CI_JOB_STATUS" != "success" ]; then
        LOG_CONTENT=$(tail -n 50 deploy_logs.txt | sed 's/`/\\`/g' | sed ':a;N;$!ba;s/\n/%0A/g');
        curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
          -d chat_id="${CHAT_ID}" \
          -d parse_mode="Markdown" \
          --data-urlencode "text=❗ *Deploy Failed!*%0A\`Last logs:\`%0A$LOG_CONTENT";
      fi
    - >
      STATUS="$CI_JOB_STATUS";
      if [ "$STATUS" = "success" ]; then ICON="✅"; else ICON="❌"; fi;
      RAW="$(printf "%s\n%s\n%s\n%s\n" \
        "${ICON} *${CI_PROJECT_PATH}* – *${CI_JOB_NAME}* (\`${CI_JOB_STAGE}\`)" \
        "*Status:* \`${STATUS}\`" \
        "*Pipeline:* [#${CI_PIPELINE_ID}](${CI_PROJECT_URL}/-/pipelines/${CI_PIPELINE_ID})" \
        "*Commit:*  [${CI_COMMIT_SHORT_SHA}](${CI_PROJECT_URL}/-/commit/${CI_COMMIT_SHA})" )";
      TEXT="${RAW//$'\n'/%0A}";
      curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
        -d chat_id="${CHAT_ID}" \
        -d parse_mode="Markdown" \
        --data-urlencode "text=${TEXT}"
  environment:
    name: production
    url: https://api.example.com
  only:
    - ci-testing   # Только по тегам v1.2.3 и т.д.
